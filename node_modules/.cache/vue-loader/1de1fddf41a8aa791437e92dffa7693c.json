{"remainingRequest":"D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js??vue-loader-options!D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\cache-loader\\dist\\cjs.js??ref--0-0!D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\vue-loader\\lib\\index.js??vue-loader-options!D:\\Desktop\\pms\\hotel-pms-web\\src\\views\\roommanagement\\room.vue?vue&type=template&id=768944c2&scoped=true&","dependencies":[{"path":"D:\\Desktop\\pms\\hotel-pms-web\\src\\views\\roommanagement\\room.vue","mtime":1590539720843},{"path":"D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\vue-loader\\lib\\loaders\\templateLoader.js","mtime":499162500000},{"path":"D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":499162500000},{"path":"D:\\Desktop\\pms\\hotel-pms-web\\node_modules\\vue-loader\\lib\\index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:"}]}